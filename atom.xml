<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kungbi&#39;s IT Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kungbi.github.io/"/>
  <updated>2020-02-21T21:56:50.443Z</updated>
  <id>http://kungbi.github.io/</id>
  
  <author>
    <name>Woongbi Shin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[부스트코스] Servlet.</title>
    <link href="http://kungbi.github.io/2020/02/21/Booster/waht-is-servlet/"/>
    <id>http://kungbi.github.io/2020/02/21/Booster/waht-is-servlet/</id>
    <published>2020-02-20T21:22:27.000Z</published>
    <updated>2020-02-21T21:56:50.443Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스팅은 자바 웹 어플리케이션의 구조와 Servlet이 무엇인지에 대해서 포스팅 하려고 한다.</p><a id="more"></a><p><span style="color:gray;font-size:0.9rem">해당 포스팅은 <a href="http://www.edwith.org/boostcourse-web" rel="external nofollow noopener noreferrer" target="_blank">커넥트재단의 edwith boostcourse - Web Programming</a>의 강의 자료를 바탕으로 작성되었습니다.</span></p><h2 id="자바-웹-어플리케이션-구조"><a href="#자바-웹-어플리케이션-구조" class="headerlink" title="자바 웹 어플리케이션 구조"></a>자바 웹 어플리케이션 구조</h2><img src="/gallery/1_5_1_____.png"><h3 id="web-xml-파일"><a href="#web-xml-파일" class="headerlink" title="web.xml 파일"></a>web.xml 파일</h3><ul><li>배포 기술자라고도 불린다.</li><li>웹 애플리케이션에 대한 정보들을 가지고있는 파일.</li><li>servlet 3.0 미만에서는 필수로 가지고 있어야 함.<br>servlet 3.0 이상에서는 어노테이션을 사용해서 대신해주는 부분들이 존재하기 떄문에 반드시 꼭 포함하지는 않아도 된다.</li></ul><h3 id="lib-폴더"><a href="#lib-폴더" class="headerlink" title="lib 폴더"></a>lib 폴더</h3><p>각종 자료 파일들 저장</p><h3 id="classes-폴더"><a href="#classes-폴더" class="headerlink" title="classes 폴더"></a>classes 폴더</h3><p>java 패키지, class들, servlet 파일이 저장된다. </p><h3 id="WEB-INF-폴더-이외의-폴더들"><a href="#WEB-INF-폴더-이외의-폴더들" class="headerlink" title="WEB-INF 폴더 이외의 폴더들"></a>WEB-INF 폴더 이외의 폴더들</h3><ul><li>각종 폴더들을 생성할 수 있다.</li><li>프론트엔트 리소스(HTML, CSS, JavaScript 등) 저장.</li><li>그 외에도 이미지 폴더, 다양한 리소스들을 저장 가능.</li></ul><hr><h2 id="Servlet-이란"><a href="#Servlet-이란" class="headerlink" title="Servlet 이란?"></a>Servlet 이란?</h2><p>자바 웹 어플리케이션 구성요소 중 <strong>동적인 처리</strong>를 하는 프로그램의 역할을 한다.</p><ul><li>서블릿은 WAS에서 동작하는 Java 클래스이다.</li><li>서블릿은 HttpServlet 클래스를 상속받아야 한다.</li><li>서블릿과 JSP로부터 최상의 결과를 얻으려면 웹 페이지를 개발할 때 이두가지(JSP, Servlet)를 조화롭게 사용해야한다.<br><span style="color: gray; font-size: 0.8rem">예) 웹 페이지를 구성하는 화면은 JSP로 표현하고 복잡한 프로그래밍은 서블릿으로 구현</span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번 포스팅은 자바 웹 어플리케이션의 구조와 Servlet이 무엇인지에 대해서 포스팅 하려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Boost Course" scheme="http://kungbi.github.io/categories/Devlog/Boost-Course/"/>
    
    
      <category term="부스트코스" scheme="http://kungbi.github.io/tags/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BD%94%EC%8A%A4/"/>
    
      <category term="servlet" scheme="http://kungbi.github.io/tags/servlet/"/>
    
      <category term="jsp" scheme="http://kungbi.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>[부스트코스] WAS란?</title>
    <link href="http://kungbi.github.io/2020/02/13/Booster/what-is-was/"/>
    <id>http://kungbi.github.io/2020/02/13/Booster/what-is-was/</id>
    <published>2020-02-12T18:46:03.000Z</published>
    <updated>2020-02-12T21:17:21.525Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스팅은 WAS가 무엇이고, 왜 필요한지 그리고 어떤 WAS가 있어며 웹서버와의 차이점에 대해서 다뤄보려고 한다.</p><a id="more"></a><p><span style="color:gray;font-size:0.9rem">해당 포스팅은 <a href="http://www.edwith.org/boostcourse-web" rel="external nofollow noopener noreferrer" target="_blank">커넥트재단의 edwith boostcourse - Web Programming</a>의 강의 자료를 바탕으로 작성되었습니다.</span></p><h2 id="WAS-Web-Application-Server"><a href="#WAS-Web-Application-Server" class="headerlink" title="WAS(Web Application Server)"></a>WAS(Web Application Server)</h2><ul><li>웹 애플리케이션과 서버환경을 만들어 동작시키는 기능을 제공하는 프레임워크이다. </li><li>HTTP를 통해 접속한 클라이언트에게 애플리케이션을 제공하기 위해 서버 사이드에서 작동한다. </li><li>동적인 페이지를 표현하기 위해 사용된다.</li></ul><h2 id="클라이언트-lt-–-gt-서버-와의-통신-과정"><a href="#클라이언트-lt-–-gt-서버-와의-통신-과정" class="headerlink" title="클라이언트 &lt;–&gt; 서버 와의 통신 과정"></a>클라이언트 &lt;–&gt; 서버 와의 통신 과정</h2><ol><li>Web Browser: 클라이언트 요청.</li><li>Web Server: WAS에게 요청.</li><li>Web Application Server: 처리 수행.</li><li>Database: 처리 수행.</li><li>Web Application Server: 결과를 웹서버에게 응답.</li><li>Web Server: 응답.</li><li>Web Browser</li></ol><h2 id="DBMS-Database-Management-System"><a href="#DBMS-Database-Management-System" class="headerlink" title="DBMS(Database Management System)"></a>DBMS(Database Management System)</h2><p>DBMS가 만들어지고 초반에는 클라이언트와 DB는 직접 연결되어 있었다. 그래서 그 당시 DB에 접속하여 동작하는 클라이언트 프로그램들이 많이 만들어졌다. 그러나 클라이언트의 로직이 많아지고, 클라이언트의 프로그램 크기가 커지게 되는 문제점이 존재했다. 그리고 한번 로직이 변경되면 클라이언트 프로그램을 다시 배포해야한다는 불편함도 있었다. 게다가 직접 연결하게 되면 보안상의 이유로도 문제가 존재했다. </p><img src="/gallery/DBMS100.png"><h2 id="미들웨어-Middle-Ware"><a href="#미들웨어-Middle-Ware" class="headerlink" title="미들웨어(Middle Ware)"></a>미들웨어(Middle Ware)</h2><p>클라이언트와 DB가 직접 연결되는 방식은 문제점이 있었다. 그래서 생겨난 것이 바로 <strong>미들웨어</strong>이다.</p><p>미들웨어는 클라이언트와 DB서버 사이에 존재한다. 양쪽에서 데이터를 주고받을 수 있도록 중간에서 매개역할을 하는 소프트웨어이다. 이 미들웨어를 통해서 표준화된 인터페이스를 제공할 수 있으며, 부하 분산을 할 수 있다. 또한 프로그램 로직이 바뀌더라도 다시 배포하지 않고 중앙의 미들웨어만 변경하면 된다.</p><img src="/gallery/1_1_7_.png"><h2 id="WAS"><a href="#WAS" class="headerlink" title="WAS"></a>WAS</h2><p>웹이 점점 복잡해지고 점점 복잡한 프로그래밍적인 기능을 요구하게 되었다. 보통 이러한 기능들을 DBMS와의 연관된 경우가 많다고 한다. 그래서 이를 단순화 하고 편리성을 위해 클라이언트와 DBMS사이에 미들웨어가 필요하게 된것이다. 이러한 미들웨어를 WAS라고 한다. WAS도 큰 의미로 미들웨어라고 볼 수 있다. </p><p><strong>WAS의 세가지 중요 기능</strong></p><ul><li>프로그램 실행 환경, 데이터베이스 접속 기능.</li><li>여러개의 트랜젝션 관리 기능.</li><li>업무를 처리하는 비즈니스 로직 수행 기능.</li></ul><p>이렇게 보면 클라이언트의 요청을 처리하는 웹서버가 필요없다고 볼 수도 있다. 왜냐하면 WAS자체의 웹서버가 충분한 기능을 가지고 있기 때문이다. </p><h2 id="WAS-vs-Webserver"><a href="#WAS-vs-Webserver" class="headerlink" title="WAS vs Webserver"></a>WAS vs Webserver</h2><p>웹서버를 사용하지않고 WAS만 사용해도 될 것 같다. 그러나 대부분의 서비스를 보면 이 둘다 사용한다. 그 이유는 무엇일까?</p><p>웹서버는 WAS보다 간단한 구조로 만들어져있다. 사람들이 많이 접속하는 대용량 웹 어플리케이션 같은 경우에는 서버의 수가 여러대일 수도 있다. 가끔씩 개발자의 실수로 서버들 중에 하나가 오작동이 되어 WAS 자체에 문제가 발생하는 경우가 있다. 이런 경우 WAS를 재시작해야한다. 이때 웹서버에서는 문제의 WAS를 이용하지 못하도록 막아놓고 WAS 재시작하면 실제 사용자는 서버가 중단이 됐는지 모르고 이용할 수 있다. 이러한 처리를 장애 <strong>극복 기능</strong>이라 한다. </p><img src="/gallery/1_1_7_was.png"><h2 id="WAS-Apache-Tomcat"><a href="#WAS-Apache-Tomcat" class="headerlink" title="WAS - Apache Tomcat"></a>WAS - Apache Tomcat</h2><p>아파치 소프트웨어 재단의 애플리케이션 서버로 자바서블릿을 실행하고 JSP 코드가 포함되어 있는 웹페이지를 만들어준다 / 자체적으로 보유하고 있는 내부 웹서버와 함께 독립적으로 사용될 수 있지만, 아파치 HTTP 웹 서버나 넷스케이프 엔터프라이즈 서버, IIS 등 다른 웹서버와 함께 사용될 수도 있다 / servlet과 JSP script를 지원하도록 개발했다.</p><p>다음은 Tomcat 버전별 서블릿, JSP, EL Spec, WebSocket, JAVA 지원 버전 목록표이다. </p><img src="/gallery/Screen Shot 2020-02-13 at 5.41.13 AM.png"><p><br></p><p align="center"><img src="/gallery/hufs_booster.jpg"></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번 포스팅은 WAS가 무엇이고, 왜 필요한지 그리고 어떤 WAS가 있어며 웹서버와의 차이점에 대해서 다뤄보려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Boost Course" scheme="http://kungbi.github.io/categories/Devlog/Boost-Course/"/>
    
    
      <category term="부스트코스" scheme="http://kungbi.github.io/tags/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BD%94%EC%8A%A4/"/>
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="booster" scheme="http://kungbi.github.io/tags/booster/"/>
    
      <category term="was" scheme="http://kungbi.github.io/tags/was/"/>
    
  </entry>
  
  <entry>
    <title>백준 10837번 문제</title>
    <link href="http://kungbi.github.io/2020/02/11/Algorithm/baekjoon-10837/"/>
    <id>http://kungbi.github.io/2020/02/11/Algorithm/baekjoon-10837/</id>
    <published>2020-02-11T06:47:29.000Z</published>
    <updated>2020-02-12T20:57:13.029Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><a id="more"></a><img src="/gallery/Screen Shot 2020-02-11 at 3.53.40 PM.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> K, C, M, N, m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(m != M || n != N)</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;K);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;C);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; C; c++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;M, &amp;N);</span><br><span class="line"></span><br><span class="line">        m = <span class="number">0</span>; n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; K+<span class="number">1</span>; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m == <span class="built_in">max</span>(M, N) || n == <span class="built_in">max</span>(M, N))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(m+<span class="number">1</span> &lt;= M)</span><br><span class="line">                m++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(m+K-k &lt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(n+<span class="number">1</span> &lt;= N)</span><br><span class="line">                n++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(n+K-k &lt; m) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!check()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!check()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Algorithm" scheme="http://kungbi.github.io/categories/Devlog/Algorithm/"/>
    
    
      <category term="baekjoon" scheme="http://kungbi.github.io/tags/baekjoon/"/>
    
      <category term="c++" scheme="http://kungbi.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>백준 10840번 문제</title>
    <link href="http://kungbi.github.io/2020/02/11/Algorithm/baekjoon-10840/"/>
    <id>http://kungbi.github.io/2020/02/11/Algorithm/baekjoon-10840/</id>
    <published>2020-02-11T06:47:00.000Z</published>
    <updated>2020-02-12T20:57:32.103Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><a id="more"></a><img src="/gallery/Screen Shot 2020-02-11 at 3.57.25 PM.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Prime;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">524287</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Hash[mod];</span><br><span class="line"><span class="keyword">int</span> x, y, len, Nlen, Mlen, now, result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(num); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(num))&#123;</span><br><span class="line">            Prime.push_back(num);</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        ++num;</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">2000</span>) &#123;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; num;</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> &amp;N, <span class="built_in">string</span> &amp;M)</span></span>&#123;</span><br><span class="line">    Nlen = N.length();</span><br><span class="line">    Mlen = M.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Nlen; i++)&#123;</span><br><span class="line">        x = y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt; Nlen; k++)&#123;</span><br><span class="line">            len = k-i+<span class="number">1</span>;</span><br><span class="line">            now = N[k] - <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">            x = (x*Prime[now]) % mod;</span><br><span class="line">            y = (y*Prime[now+<span class="number">26</span>]) % mod;</span><br><span class="line"></span><br><span class="line">            Hash[x].push_back(&#123;y, len&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Mlen; i++)&#123;</span><br><span class="line">        x = y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt; Mlen; k++)&#123;</span><br><span class="line">            len = k-i+<span class="number">1</span>;</span><br><span class="line">            now = M[k] - <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">            x = (x*Prime[now]) % mod;</span><br><span class="line">            y = (y*Prime[now+<span class="number">26</span>]) % mod;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Hash[x].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Hash[x][j] == make_pair(y, len)) &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                result = <span class="built_in">max</span>(len, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    getPrime();</span><br><span class="line">    <span class="built_in">string</span> N, M;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    solve(N, M);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Algorithm" scheme="http://kungbi.github.io/categories/Devlog/Algorithm/"/>
    
    
      <category term="baekjoon" scheme="http://kungbi.github.io/tags/baekjoon/"/>
    
      <category term="c++" scheme="http://kungbi.github.io/tags/c/"/>
    
      <category term="hash" scheme="http://kungbi.github.io/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>[C++] STL 이란</title>
    <link href="http://kungbi.github.io/2020/02/04/C++/what-is-stl/"/>
    <id>http://kungbi.github.io/2020/02/04/C++/what-is-stl/</id>
    <published>2020-02-04T04:22:38.000Z</published>
    <updated>2020-02-12T17:20:11.693Z</updated>
    
    <content type="html"><![CDATA[<hr><p>C++ 공부와 알고리즘 공부 차원에서 STL에 대해서 알아보았다.</p><a id="more"></a><h2 id="STL이란"><a href="#STL이란" class="headerlink" title="STL이란"></a>STL이란</h2><ul><li>표준 C++ 라이브러리(Standard Template Library)</li><li>프로그램에 필요한 자료구조와 알고리즘을 템플릿으로 제공하는 라이브러리</li></ul><hr><h2 id="STL-구성-요소"><a href="#STL-구성-요소" class="headerlink" title="STL 구성 요소"></a>STL 구성 요소</h2><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>STL 데이터를 보관하기 위한 다양한 컨테이너를 제공한다. 컨테이너는 데이터를 저장하는 객체이다. </p><h4 id="Sequence-containers"><a href="#Sequence-containers" class="headerlink" title="Sequence containers"></a>Sequence containers</h4><ul><li>array</li><li>vector</li><li>deque</li><li>forward_list</li><li>list</li></ul><h4 id="Associative-containers"><a href="#Associative-containers" class="headerlink" title="Associative containers"></a>Associative containers</h4><ul><li>set</li><li>multiset</li><li>map</li><li>multimap</li></ul><h4 id="Unordered-associative-containers"><a href="#Unordered-associative-containers" class="headerlink" title="Unordered associative containers"></a>Unordered associative containers</h4><ul><li>unordered_set</li><li>unordered_multiset</li><li>unordered_map</li><li>unordered_multimap</li></ul><h4 id="Container-adaptors"><a href="#Container-adaptors" class="headerlink" title="Container adaptors"></a>Container adaptors</h4><ul><li>stack</li><li>queue</li><li>priority_queue</li></ul><br/><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>포인터처럼 컨테이너 원소를 가리키고, 가리키는 원소의 다음 원소를 가리길 수 있는 기능이다. 데이터들을 순회할 수 있는 반복자이다.</p><br/><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>정렬, 삭제, 검색, 연산 등을 해결하는 알고리즘 제공.</p><br/><h3 id="Functor"><a href="#Functor" class="headerlink" title="Functor"></a>Functor</h3><p>STL에는 함수 호출 연산자를 오버로드하는 클래스가 포함되어 있다. 이러한 클래스의 인스턴스를 함수 객체 또는 펑터라고한다. 펑터를 사용하면 매개 변수를 통해 관련 기능의 작업을 사용자 정의 할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;C++ 공부와 알고리즘 공부 차원에서 STL에 대해서 알아보았다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="C++" scheme="http://kungbi.github.io/categories/Devlog/C/"/>
    
    
      <category term="stl" scheme="http://kungbi.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>[부스트코스] 브라우저의 작동 방식</title>
    <link href="http://kungbi.github.io/2020/01/30/Booster/how-browser-work/"/>
    <id>http://kungbi.github.io/2020/01/30/Booster/how-browser-work/</id>
    <published>2020-01-29T18:19:08.000Z</published>
    <updated>2020-02-12T20:12:15.297Z</updated>
    
    <content type="html"><![CDATA[<p>오늘은 웹브라우저가 어떻게 렌더링과정을 거쳐서 화면에 보이게 되는지에 대해서 강의를 듣고 공부를 했다. 웹브라우저가 서버로부터 리소스를 받으면 어떤 과정으로 처리하고, 화면에 보이기 까지 과정을 포스팅 하려고 한다.</p><a id="more"></a><p><span style='color:gray;font-size:0.9rem'>해당 포스팅은 <a href="http://www.edwith.org/boostcourse-web">커넥트재단의 edwith boostcourse - Web Programming</a>의 강의 자료를 바탕으로 작성되었습니다.</span></p><h2 id="브라우저의-주요기능"><a href="#브라우저의-주요기능" class="headerlink" title="브라우저의 주요기능"></a>브라우저의 주요기능</h2><ul><li>서버와의 통신을 담당한다.</li><li>서버로 부터 받은 리소스(HTML, PDF, 이미지, 동영상 등)을 화면에 표시될 수 있도록 한다.</li><li>HTML, CSS, JavaScript 를 해석해서 화면에 그려준다.</li></ul><p>브라우저의 대표적인 기능은 화면에 받은 리소스들을 해석해 표현하는 것이라 볼 수 있다. 그렇다면 이를 어떤 방식으로 처리하는지 알아보자. 일단 브라우저의 구조부터 확인하자.</p><hr><h2 id="브라우저-기본-구조"><a href="#브라우저-기본-구조" class="headerlink" title="브라우저 기본 구조"></a>브라우저 기본 구조</h2><p>브라우저는 여러 많은 종류가 있다. Chrome, Explorer, Firefox 등 말이다. 그런데 기본적인 구조는 동일하다. 다음은 브라우저의 기본 구조이다.</p><p align='center'><img src='/gallery/helloworld-59361-1.png'/></p>#### 사용자 인터페이스<p>주소 표시줄, 이전/다음 버튼, 북마크 등 사용자가 직접 볼 수 있고, 활용할 수 있는 서비스들.</p><h4 id="브라우저-엔진"><a href="#브라우저-엔진" class="headerlink" title="브라우저 엔진"></a>브라우저 엔진</h4><p>사용자 인터페이스와 렌더링 엔진 사이의 동작 제어.</p><h4 id="렌더링-엔진"><a href="#렌더링-엔진" class="headerlink" title="렌더링 엔진"></a>렌더링 엔진</h4><p>받은 리소스들을 표시, HTML CSS JavaScript를 해석해 화면에 그려준다.</p><h4 id="통신"><a href="#통신" class="headerlink" title="통신"></a>통신</h4><p>HTTP 요청과 같은 네트워크 통신에 사용된다.</p><h4 id="자바스크립트-해석기"><a href="#자바스크립트-해석기" class="headerlink" title="자바스크립트 해석기"></a>자바스크립트 해석기</h4><p>자바스크립트 코드를 해석한다.</p><h4 id="UI-백엔드"><a href="#UI-백엔드" class="headerlink" title="UI 백엔드"></a>UI 백엔드</h4><p>플랫폼에서 명시하지 않은 일반적인 인터페이스로서, OS 사용자 인터페이스 체계를 사용.</p><h4 id="자료-저장소"><a href="#자료-저장소" class="headerlink" title="자료 저장소"></a>자료 저장소</h4><p>쿠키와 같이 계속 저장해야하는 데이터를 저장하는 곳.</p><hr><h2 id="렌더링-엔진-1"><a href="#렌더링-엔진-1" class="headerlink" title="렌더링 엔진"></a>렌더링 엔진</h2><p>이번 포스팅에서 주요하게 봐야할 주제를 <strong>렌더링</strong> 이다. 렌더링을 하기 위해선 렌더링 엔진을 이해하는 것이 중요하다. </p><p>렌더링 엔진은 HTML 및 XML 문서와 이미지를 표시할 수 있다. 물론 플러그인이나 브라우저 확장 기능을 이용해 PDF와 같은 다른 유형도 표시할 수 있다. </p><p>렌더링 엔진은 여러 종류가 있는데, <a href="https://ko.wikipedia.org/wiki/게코_(레이아웃_엔진)">게코</a>(Gecko), <a href="https://ko.wikipedia.org/wiki/블링크_(레이아웃_엔진)">블링크</a>(Blink), <a href="https://ko.wikipedia.org/wiki/웹키트">웹키트</a>(Webkit) 등 여러개가 존재한다. </p><h3 id="동작-과정"><a href="#동작-과정" class="headerlink" title="동작 과정"></a>동작 과정</h3><p align='center'><img src='/gallery/helloworld-59361-2.png'/></p>1. **DOM** 이란 Document Object Model 이다. HTML를 하나의 **객체 트리**로 만들어, 프로그래밍 언어(JavaScript)가 DOM 구조에 접근할 수 있는 방법을 제공하여 그들이 문서 구조, 스타일, 내용 등을 변경할 수 있게 돕는다.<p>   DOM은 HTML을 토대로 객체로 만들어 트리형식으로 <strong>DOM 트리</strong> 를 구축하게 된다.</p><ol start="2"><li><p>그리고 외부 CSS파일과 함께 포함된 스타일 요소들을 파싱한다. 스타일 정보와 HTML 표시 규칙은 <strong>렌더 트리</strong> 라는 또하나의 트리를 생성한다.</p></li><li><p>렌더 트리 생성이 끝나면 <strong>배치</strong>가 시작되는데 이것은 각 노드가 화면의 <strong>정확한 위치</strong>에 표시되는 것을 의미한다. </p></li><li><p>마지막으로 <strong>UI 백엔드</strong>에서 렌더 트리의 각 노드를 가로지르며 형상을 만들어 내는 <strong>그리기 과정</strong> 이다.</p></li></ol><p><span style='color:gray;'>❖ 이 과정은 1, 2, 3, 4 순서대로 동기적으로 이루어지는 것이 아니라 모든 HTML이을 파싱할할때 까지 기다리지 않고 파싱이 되는대로 배치 -&gt; 그리기를 반복한다고 한다. 웹사이트에 들어가게 되면 한번에 뜨지않고 부분부분 나오는 이유.</span></p><h3 id="동작-과정-예"><a href="#동작-과정-예" class="headerlink" title="동작 과정 예"></a>동작 과정 예</h3><p align='center'><img src='/gallery/helloworld-59361-3.png'/></p>---<h2 id="파싱과-DOM-트리-구축"><a href="#파싱과-DOM-트리-구축" class="headerlink" title="파싱과 DOM 트리 구축"></a>파싱과 DOM 트리 구축</h2><p>파싱은 렌더링에서 매우 중요한 개념이다. 문서 <strong>파싱</strong>은 브라우저가 코드를 이해하고 사용할 수 있는 구조로 변환하는 것을 의미한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"example.png"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p align='center'><img src='/gallery/helloworld-59361-8.png'/></p>다음과 같이 html 태그 아래 body태그 아래 p태그 와 div태그가 있고 p 태그 아래에는 텍스트가 div태그 아래에는 img 태그가 존재한다. 이를 파싱해 트리형태로 DOM을 구현한다. <p><br/><p align='center'><img src='/gallery/hufs_booster.jpg'/></p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;오늘은 웹브라우저가 어떻게 렌더링과정을 거쳐서 화면에 보이게 되는지에 대해서 강의를 듣고 공부를 했다. 웹브라우저가 서버로부터 리소스를 받으면 어떤 과정으로 처리하고, 화면에 보이기 까지 과정을 포스팅 하려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Boost Course" scheme="http://kungbi.github.io/categories/Devlog/Boost-Course/"/>
    
    
      <category term="부스트코스" scheme="http://kungbi.github.io/tags/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BD%94%EC%8A%A4/"/>
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="browser" scheme="http://kungbi.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>[부스트코스] HTTP 프로토콜이란?</title>
    <link href="http://kungbi.github.io/2020/01/29/Booster/http-protocol/"/>
    <id>http://kungbi.github.io/2020/01/29/Booster/http-protocol/</id>
    <published>2020-01-28T16:23:19.000Z</published>
    <updated>2020-02-12T17:20:00.103Z</updated>
    
    <content type="html"><![CDATA[<p>웹 브라우저와 웹 서버 간에 서로 통신하기 위해서는 일종의 규약이 필요하다. 이때 필요한 규약이 HTTP이다. 이번 포스팅에선 HTTP에 대하여 글을 써보려고 한다.</p><a id="more"></a><p><span style='color:gray;font-size:0.9rem'>해당 포스팅은 <a href="http://www.edwith.org/boostcourse-web">커넥트재단의 edwith boostcourse - Web Programming</a>의 강의 자료를 바탕으로 작성되었습니다.</span></p><hr><h2 id="HTTP-Hypertext-Transfer-Protocol-이란"><a href="#HTTP-Hypertext-Transfer-Protocol-이란" class="headerlink" title="HTTP(Hypertext Transfer Protocol) 이란?"></a>HTTP(Hypertext Transfer Protocol) 이란?</h2><p><strong>HTTP</strong>는 인터넷에서 데이터를 주고받기 위한 프로토콜이다. 프로토콜을 쉽게 말해서 규칙이라 보면 된다. 로컬에서만 동작하는(인터넷을 사용하지 않는) 소프트웨어가 아닌, 서버와 상호작용하는 소프트웨어를 개발한다면 <strong>HTTP Protocol</strong>에 대해서 기본적인 개념을 알아야 한다.</p><p align='center'><img src='/gallery/193BE9374FED5A322362D9.jpeg' width='50%'/></p>HTTP는 1989년 **팀 버너스리(Tim Berners-Lee)** 에 의해 처음 설계되어 인터넷을 통한 **World Wide Web(WWW)**을 기반으로 전 세계적인 정보공유를 이루는데 큰 역할을 했다.<p>HTTP 말 그대로 hyper 초월의 뜻으로 hypertext는 <strong>그저 텍스트가 아닌 그 이상을 뛰어넘어 이미지, 동영상, 오디오 등을 표현</strong>할 수 있다는 의미로 해석하면 된다.</p><p> <strong>HTTP</strong>는 웹에서만 사용하는 프로토콜로 <strong>TCP/IP</strong> 기반으로 한 지점에서 다른 지점으로 <strong>요청</strong>과 <strong>응답</strong>을 전송한다.</p><hr><h2 id="HTTP-작동-방식"><a href="#HTTP-작동-방식" class="headerlink" title="HTTP 작동 방식"></a>HTTP 작동 방식</h2><p align='center'><img src='/gallery/request-response.png'/></p>HTTP는 기본적으로 **Request(요청)**과 **Response(응답)** 으로 나뉜다. **클라이언트(브라우저)**가 서버에 접속하면 Request를 하게 되고 **서버**에선 Request에 따라서 맞는 Response를 하게 된다. <p>만약 <a href="http://naver.com">http://naver.com</a> 에 접속하게 된다면, 네이버 서버는 <strong>네이버 홈페이지</strong>를 응답하게 되고 <a href="https://news.naver.com">https://news.naver.com</a> 에 접속하면 네이버는 <strong>네이버 뉴스 페이지</strong>를 응답하게 된다. </p><h4 id="HTTP-특징"><a href="#HTTP-특징" class="headerlink" title="HTTP 특징"></a>HTTP 특징</h4><ul><li>HTTP는 연결 상태를 유지하지 않는 <strong>비연결성 프로토콜</strong>이다.<br>따라서 서버 간의 최대 연결 수보다 훨씬 많은 요청과 응답을 처리할 수 있다.<br>그러나 연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수가 없다. 이러한 단점을 해결하기 위해 <strong>Cookie</strong>와 <strong>Seesion</strong> 등장하게 된다.</li><li>HTTP는 연결을 유지하지 않는 프로토콜이기 떄문에 <strong>요청/응답(request/response)</strong> 방식으로 동작한다.</li></ul><hr><h2 id="URL-Uniform-Resorce-Locator"><a href="#URL-Uniform-Resorce-Locator" class="headerlink" title="URL(Uniform Resorce Locator)"></a>URL(Uniform Resorce Locator)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://kungbi.github.io</span><br></pre></td></tr></table></figure><ul><li><strong>URL</strong>은 인터넷 상의 <strong>자원(컴퓨터)</strong>가 어디에 있는지를 알려주기 위한 규약이다. </li><li>집 주소(도로명 주소)와 똑같은 개념이다. </li><li>URL에 접속하기 위해선 해당 URL에 맞는 프로토콜을 알아야 하고, 그와 동일한 프로토콜로 접속해야 한다.</li></ul><hr><h2 id="HTTP-Header"><a href="#HTTP-Header" class="headerlink" title="HTTP Header"></a>HTTP Header</h2><p align='center'><img src='/gallery/request_header.png' width='70%'/></p>**HTTP Header**은 웹브라우저가 HTTP프로토콜을 이용해 요청 정보를 웹 서버로 전송할 때 HTTP 요청 헤더에 **부가적인 정보**를 담아 전송한다. 대표적인 몇가지를 소개하려고 한다.<h4 id="요청-URL"><a href="#요청-URL" class="headerlink" title="요청 URL"></a>요청 URL</h4><ul><li>요청을 하는 자원의 URL 의미한다.</li></ul><h4 id="요청-메서드"><a href="#요청-메서드" class="headerlink" title="요청 메서드"></a>요청 메서드</h4><ul><li><strong>GET</strong> : 정보를 요청하기 위해 사용.</li><li><strong>POST</strong>: 정보를 입력하기 위해 사용.</li><li><strong>PUT</strong> : 정보를 수정하기 위해 사용.</li><li><strong>DELETE</strong> : 정보를 삭제하기 위해 사용.</li><li>…</li></ul><h4 id="쿠키"><a href="#쿠키" class="headerlink" title="쿠키"></a>쿠키</h4><ul><li>HTTP의 비연결성의 단점을 해결하기 위해 사용자의 상태 정보를 저장하는 것을 쿠키라 한다. 요청을 할시에 쿠키를 같이 전송하여 인증을  시행한다. ex) 자동 로그인, 로그인 상태 유지</li></ul><hr><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS?"></a>HTTPS?</h2><p align='center'><img src='/gallery/download.png' width='50%'/></p>**HTTPS**는 **HTTP**와 같은 통신 프로토콜이다. 사용방식 또한 HTTP와 거의 비슷하다.<p>HTTP와 HTTPS와의 차이점은 <strong>HTTP의 취약점을 보완</strong>한 것에 있다. HTTP는 서버와 주고받는 패킷이 암호화 처리가 되어 있지 않아 만약 중간에 패킷을 가로챈다면 보안상 치명적인 결과를 가져올 수 있다.</p><p>그래서 HTTPS는 HTTP의 취약점을 보완하기 위해 주고받는 모든 메시지를 암호화한다. 즉, 중간에 패킷을 가로챈다고 해도 암호화된 내용이 노출되기 떄문에 보안상 안전하고, 공유된 대칭키를 모르는 상황에서 암호화를 푼다는 것은 모든 경우의 키를 대입해야한다는 것이다.</p><blockquote><p> 만약 1024 비트(보통은 128비트 암호화)의 암호화라면, 평균적으로 2의 512승을 대입해야하며, 이것은2475880078570760000000000000.00이라는 수를 대입해야 한다는 뜻과 같다고 한다.</p></blockquote><p align='center'><img src='/gallery/hufs_booster.jpg'/></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;웹 브라우저와 웹 서버 간에 서로 통신하기 위해서는 일종의 규약이 필요하다. 이때 필요한 규약이 HTTP이다. 이번 포스팅에선 HTTP에 대하여 글을 써보려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Boost Course" scheme="http://kungbi.github.io/categories/Devlog/Boost-Course/"/>
    
    
      <category term="부스트코스" scheme="http://kungbi.github.io/tags/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BD%94%EC%8A%A4/"/>
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="booster" scheme="http://kungbi.github.io/tags/booster/"/>
    
      <category term="protocol" scheme="http://kungbi.github.io/tags/protocol/"/>
    
      <category term="http" scheme="http://kungbi.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>부스트코스 서포터즈 BOOSTER</title>
    <link href="http://kungbi.github.io/2020/01/26/Booster/new-category-boostcourse/"/>
    <id>http://kungbi.github.io/2020/01/26/Booster/new-category-boostcourse/</id>
    <published>2020-01-25T17:44:29.000Z</published>
    <updated>2020-02-12T17:19:48.637Z</updated>
    
    <content type="html"><![CDATA[<p>edwith는 네이버(NAVER)와 커넥트재단(CONNECT)이 비영리로 운영중인 MOOC사이트이다. MOOC은 온라인 공개수업(Massive Open Online Course)을 의미한다. 그래서 이번에 부스트코스 서포터즈 BOOSTER 2기를 모집하길래 어떤 활동인지 알아보았다. </p><a id="more"></a><img src='/gallery/Screen Shot 2020-01-30 at 2.53.38 AM.png'/><p>생각보다 체계적인 운영 방식으로 되어있었다. 지원하기 전 강의를 몇개 구경했는데 강의 품질도 좋았다. 제일 좋았던 부분은 프로젝트 미션이 있다는 것이다. 사실 개념만 공부만 하다보면 피곤하기도하고 재미도 없다. 근데 부스트코스는 프로젝트 미션과 함께 실제 현업 전문가가 코드리뷰를 해서 피드백을 받을 수 있다. 게다가 모두 수료하면 기업 연계 기회도 준다고 한다<span style='font-size:0.8rem;color:gray;'>(사실 네이버가 하는거면 다 좋아보인다.)</span>).</p><p>다른 신기한 점은, 부스트코스에서 블로그 운영, 포스팅을 유도한다. 개발자라면 하나씩 있어야하는 개발 블로그, 보통의 컴공 대학생은 개발 블로그를 운영하지 않는다. 그래서 부스트코스는 대학생들에게 정말 도움되는 활동이 아닌가 싶다. 나도 부스트코스를 하면서 글을 주기적으로 올리려고한다.</p><p>할튼간에 부스트코스 서포터즈 BOOSTER 2기에 합격했기 때문에, 앞으로 강의를 들으면서 배운점 공유하고싶은 부분은 글을 쓰려고한다. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;edwith는 네이버(NAVER)와 커넥트재단(CONNECT)이 비영리로 운영중인 MOOC사이트이다. MOOC은 온라인 공개수업(Massive Open Online Course)을 의미한다. 그래서 이번에 부스트코스 서포터즈 BOOSTER 2기를 모집하길래 어떤 활동인지 알아보았다. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Boost Course" scheme="http://kungbi.github.io/categories/Devlog/Boost-Course/"/>
    
    
      <category term="부스트코스" scheme="http://kungbi.github.io/tags/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BD%94%EC%8A%A4/"/>
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="booster" scheme="http://kungbi.github.io/tags/booster/"/>
    
  </entry>
  
  <entry>
    <title>[알고리즘] Intro</title>
    <link href="http://kungbi.github.io/2020/01/20/Algorithm/new-category-algorithm/"/>
    <id>http://kungbi.github.io/2020/01/20/Algorithm/new-category-algorithm/</id>
    <published>2020-01-19T17:21:35.000Z</published>
    <updated>2020-02-12T17:19:12.878Z</updated>
    
    <content type="html"><![CDATA[<p>고등학교때 잠깐 알고리즘 공부를 했었는데, 그땐 별로 재미없기도 하고 할 이유가 별로 없어서 바로 그만뒀던 것 같다. 이제 곧 대학 수업에 알고리즘도 들어가고 코테준비도 하고 그러려면 지금부터 알고리즘을 공부해야할 것 같다. 그래서 이렇게 카테고리를 만들어서 공부를 시작해보려고 합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;고등학교때 잠깐 알고리즘 공부를 했었는데, 그땐 별로 재미없기도 하고 할 이유가 별로 없어서 바로 그만뒀던 것 같다. 이제 곧 대학 수업에 알고리즘도 들어가고 코테준비도 하고 그러려면 지금부터 알고리즘을 공부해야할 것 같다. 그래서 이렇게 카테고
      
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Algorithm" scheme="http://kungbi.github.io/categories/Devlog/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://kungbi.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Next.js - 게시판 만들기</title>
    <link href="http://kungbi.github.io/2020/01/12/Next.js/next-js-make-board_1/"/>
    <id>http://kungbi.github.io/2020/01/12/Next.js/next-js-make-board_1/</id>
    <published>2020-01-12T14:27:29.000Z</published>
    <updated>2020-02-12T17:20:33.439Z</updated>
    
    <content type="html"><![CDATA[<p>이전 포스팅에선 Link API를 사용해서 다른 페이지로 넘어가는 것을 구현했다. 이번 포스팅에서는 간단한 게시판(DB사용 X)을 만들어보려고 한다.</p><a id="more"></a><h2 id="게시물-목록-구현"><a href="#게시물-목록-구현" class="headerlink" title="게시물 목록 구현"></a>게시물 목록 구현</h2><p>우선 게시물 페이지로 넘어가기 위한 게시물 목록을 만들어보자.</p><p><code>components/PostLink.js</code> 파일을 생성하여 다음 코드를 작성하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;Link href=&#123;<span class="string">`/post?id=<span class="subst">$&#123;props.id&#125;</span>`</span>&#125;&gt;</span><br><span class="line">            &lt;a style=&#123;&#123;<span class="attr">fontSize</span>: <span class="string">'1.5rem'</span>&#125;&#125;&gt;&#123;props.title&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Link&gt;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p><code>posts/index.js</code> 를 다음과 같이 수정했다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseLayout <span class="keyword">from</span> <span class="string">'../components/BaseLayout'</span>;</span><br><span class="line"><span class="keyword">import</span> PostLink <span class="keyword">from</span> <span class="string">'../components/PostLink'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>: <span class="string">"Post Title #1"</span>, <span class="attr">content</span>: <span class="string">"#1 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">title</span>: <span class="string">"Post Title #2"</span>, <span class="attr">content</span>: <span class="string">"#2 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">title</span>: <span class="string">"Post Title #3"</span>, <span class="attr">content</span>: <span class="string">"#3 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">4</span>, <span class="attr">title</span>: <span class="string">"Post Title #4"</span>, <span class="attr">content</span>: <span class="string">"#4 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">5</span>, <span class="attr">title</span>: <span class="string">"Post Title #5"</span>, <span class="attr">content</span>: <span class="string">"#5 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">6</span>, <span class="attr">title</span>: <span class="string">"Post Title #6"</span>, <span class="attr">content</span>: <span class="string">"#6 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">7</span>, <span class="attr">title</span>: <span class="string">"Post Title #7"</span>, <span class="attr">content</span>: <span class="string">"#7 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">8</span>, <span class="attr">title</span>: <span class="string">"Post Title #8"</span>, <span class="attr">content</span>: <span class="string">"#8 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">9</span>, <span class="attr">title</span>: <span class="string">"Post Title #9"</span>, <span class="attr">content</span>: <span class="string">"#9 content"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PostList = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &#123;posts.map(<span class="function">(<span class="params">data, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">PostLink</span> <span class="attr">id</span>=<span class="string">&#123;data.id&#125;</span> <span class="attr">title</span>=<span class="string">&#123;data.title&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;/</span>&gt;</span></span></span><br><span class="line">        &#125;)&#125;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Index = () =&gt; (</span></span><br><span class="line"><span class="regexp">    &lt;BaseLayout&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;</span></span><br><span class="line"><span class="regexp">            Next.js Main Page.</span></span><br><span class="line"><span class="regexp">        &lt;/</span>h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;PostList/&gt;</span><br><span class="line">    &lt;<span class="regexp">/BaseLayout&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Index;</span></span><br></pre></td></tr></table></figure><p><code>posts</code> 변수는 게시물 목록 더미데이터 이다. 그리고 <code>map</code> 함수로 posts 데이터들을 사용해 <code>&lt;PostLink&gt;</code> 컴포넌트를 생성했다. 그러면 다음과 같이 화면에 출력된다.</p><img src='/gallery/Screen Shot 2020-01-12 at 11.37.12 PM.png'/><hr><h2 id="게시물-세부-내용-확인-페이지"><a href="#게시물-세부-내용-확인-페이지" class="headerlink" title="게시물 세부 내용 확인 페이지"></a>게시물 세부 내용 확인 페이지</h2><p>이번엔 각 게시물을 볼 수 있도록 게시물을 보는 페이지를 만들어보자. <code>pages/post.js</code> 파일을 생성해서 다음의 코드를 작성했다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseLayout <span class="keyword">from</span> <span class="string">"../components/BaseLayout"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">'next/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">title</span>: <span class="string">"Post Title #1"</span>, <span class="attr">content</span>: <span class="string">"#1 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">title</span>: <span class="string">"Post Title #2"</span>, <span class="attr">content</span>: <span class="string">"#2 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">title</span>: <span class="string">"Post Title #3"</span>, <span class="attr">content</span>: <span class="string">"#3 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">4</span>, <span class="attr">title</span>: <span class="string">"Post Title #4"</span>, <span class="attr">content</span>: <span class="string">"#4 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">5</span>, <span class="attr">title</span>: <span class="string">"Post Title #5"</span>, <span class="attr">content</span>: <span class="string">"#5 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">6</span>, <span class="attr">title</span>: <span class="string">"Post Title #6"</span>, <span class="attr">content</span>: <span class="string">"#6 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">7</span>, <span class="attr">title</span>: <span class="string">"Post Title #7"</span>, <span class="attr">content</span>: <span class="string">"#7 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">8</span>, <span class="attr">title</span>: <span class="string">"Post Title #8"</span>, <span class="attr">content</span>: <span class="string">"#8 content"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">9</span>, <span class="attr">title</span>: <span class="string">"Post Title #9"</span>, <span class="attr">content</span>: <span class="string">"#9 content"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Content = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> router = useRouter();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> post = posts[router.query.id <span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">const</span> title = post.title;</span><br><span class="line">    <span class="keyword">const</span> content = post.content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;h1&gt;&#123;title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p&gt;&#123;content&#125;&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Post = (props) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    return(</span></span><br><span class="line"><span class="regexp">        &lt;BaseLayout&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Content/</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/BaseLayout&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Post;</span></span><br></pre></td></tr></table></figure><p><code>next/router</code> 로 현재 파라미터를 받아와서 해당 데이터를 <code>posts</code> json변수에서 받아온다. 그리고 title과 content를 추출해 화면에 출력했다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이전 포스팅에선 Link API를 사용해서 다른 페이지로 넘어가는 것을 구현했다. 이번 포스팅에서는 간단한 게시판(DB사용 X)을 만들어보려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Next.js" scheme="http://kungbi.github.io/categories/Devlog/Next-js/"/>
    
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="next.js" scheme="http://kungbi.github.io/tags/next-js/"/>
    
      <category term="react.js" scheme="http://kungbi.github.io/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>Fetch API 사용하기</title>
    <link href="http://kungbi.github.io/2020/01/10/Web/fetch-api-use/"/>
    <id>http://kungbi.github.io/2020/01/10/Web/fetch-api-use/</id>
    <published>2020-01-10T12:15:31.000Z</published>
    <updated>2020-02-12T17:20:49.312Z</updated>
    
    <content type="html"><![CDATA[<p><strong>fetch()는 네트워크 요청을 쉽게 활용할 수 있게 만들어준다.</strong> api를 가져올 때 예전에는 XMLHttpRequest을 사용했다. 이 포스팅에서는 보다 편리하게 개발할 수 있게 도와주는 fetch를 사용하여 쉽게 데이터를 가져오는 방법을 포스팅 하려고 한다.</p><a id="more"></a><h2 id="Fetch-API-사용법"><a href="#Fetch-API-사용법" class="headerlink" title="Fetch API 사용법"></a>Fetch API 사용법</h2><h3 id="일반적인-Fetch-API-문법"><a href="#일반적인-Fetch-API-문법" class="headerlink" title="일반적인 Fetch API 문법"></a>일반적인 Fetch API 문법</h3><h6 id="1-데이터만-가져올-때"><a href="#1-데이터만-가져올-때" class="headerlink" title="#1: 데이터만 가져올 때"></a>#1: 데이터만 가져올 때</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(url)</span><br></pre></td></tr></table></figure><h6 id="2-데이터를-받아와-이후에-처리할-내용이-있다면"><a href="#2-데이터를-받아와-이후에-처리할-내용이-있다면" class="headerlink" title="#2: 데이터를 받아와 이후에 처리할 내용이 있다면"></a>#2: 데이터를 받아와 이후에 처리할 내용이 있다면</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Code ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Fetch-API-옵션-및-파라미터"><a href="#Fetch-API-옵션-및-파라미터" class="headerlink" title="Fetch API 옵션 및 파라미터"></a>Fetch API 옵션 및 파라미터</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Code ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="api를-통해-연습해보기"><a href="#api를-통해-연습해보기" class="headerlink" title="api를 통해 연습해보기"></a>api를 통해 연습해보기</h2><p>랜덤으로 유저 정보를 생성해서 정보를 제공하는 API가 있다. 이 API를 통해서 fetch를 연습해보자.</p><h4 id="랜덤-유저-생성기"><a href="#랜덤-유저-생성기" class="headerlink" title="랜덤 유저 생성기"></a><a href="https://randomuser.me/">랜덤 유저 생성기</a></h4><p>랜덤유저생성기는 자동으로 유저 정보를 생성해준다. 10명의 정보를 가져오려 한다면 파라미터로 ?result=10이라고 붙여주면 된다.그러면 fetch로 랜덤 유저 생성기 API를 사용해 결과를 콘솔 로그창에 출력해보자.</p><p>Chrome의 개발자모드로 들어가 Console에서 로그를 확인 할 수 있다.</p><p>위의 코드를 실행하면 <strong>“프로미스”</strong>라는 값을 받게 된다. 프로미스는 자바스크립트의 <strong>비동기 처리에 활용되는 객체</strong> 이다. 동기라는 것은 프로그램이 끝날 때까지 다른 일은 하지 않는 것이다. 비동기라는 것은 요청해놓고 다른일을 하면서 기다리는 것이다. 프로미스는 비동기 처리 객체이기때문에 다른 것을 하다가 요청에 대한 응답이 왔을 때 그 요청에 대한 것을 이어서 처리하면 된다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;fetch()는 네트워크 요청을 쉽게 활용할 수 있게 만들어준다.&lt;/strong&gt; api를 가져올 때 예전에는 XMLHttpRequest을 사용했다. 이 포스팅에서는 보다 편리하게 개발할 수 있게 도와주는 fetch를 사용하여 쉽게 데이터를 가져오는 방법을 포스팅 하려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Web" scheme="http://kungbi.github.io/categories/Devlog/Web/"/>
    
    
      <category term="fetch" scheme="http://kungbi.github.io/tags/fetch/"/>
    
      <category term="ajex" scheme="http://kungbi.github.io/tags/ajex/"/>
    
  </entry>
  
  <entry>
    <title>Next.js - Component 생성</title>
    <link href="http://kungbi.github.io/2020/01/09/Next.js/next.js_make_component/"/>
    <id>http://kungbi.github.io/2020/01/09/Next.js/next.js_make_component/</id>
    <published>2020-01-09T11:43:37.000Z</published>
    <updated>2020-02-12T17:20:29.088Z</updated>
    
    <content type="html"><![CDATA[<p>React에서 component를 생성해서 여러가지 방법으로 재사용하고 편리하게 화면을 구성할 수 있는 요소이다. Next.js에서 component를 어떻게 생성하는지 알아보았다.</p><a id="more"></a><h2 id="컴포넌트-디렉토리"><a href="#컴포넌트-디렉토리" class="headerlink" title="컴포넌트 디렉토리"></a>컴포넌트 디렉토리</h2><p>Next.js에서 컴포넌트를 생성하기 위해선 <code>components</code> 디렉토리가 필요하다. 최상위 디렉토리에서 <code>components</code> 디렉토리를 생성하자. <span style='color: gray'>components디렉토리에 컴포넌트를 생성하지 않으면 오류가 발생한다.</span></p><h2 id="헤더-컴포넌트-생성"><a href="#헤더-컴포넌트-생성" class="headerlink" title="헤더 컴포넌트 생성"></a>헤더 컴포넌트 생성</h2><p><code>components/Header.js</code> 를 생성한다. 그리고 다름 코드를 작성하였다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LinkStyle = &#123;</span><br><span class="line">    marginRight: <span class="string">'1rem'</span>,</span><br><span class="line">    fontSize: <span class="string">'1.5rem'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HeaderStyle = &#123;</span><br><span class="line">    border: <span class="string">'0.5rem dashed pink'</span>,</span><br><span class="line">    borderRadius: <span class="string">'10px'</span>,</span><br><span class="line">    margin: <span class="string">'1rem'</span>,</span><br><span class="line">    padding: <span class="string">'1rem'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div style=&#123;HeaderStyle&#125;&gt;</span><br><span class="line">      &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">          &lt;a style=&#123;LinkStyle&#125;&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">          &lt;a style=&#123;LinkStyle&#125;&gt;About&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Link&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><h2 id="컴포넌트-import"><a href="#컴포넌트-import" class="headerlink" title="컴포넌트 import"></a>컴포넌트 import</h2><p><code>pages/index.js</code> 와 <code>pages/about.js</code> 에서 <code>components/Header.js</code> 를 사용해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'../components/Header'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Header/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            Next.js Main Page.</span><br><span class="line">        &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Link href='/</span>about<span class="string">'&gt;</span></span><br><span class="line"><span class="string">          &lt;a&gt;Link API - About&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/Link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;br/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;a href='</span>/about<span class="string">'&gt;A tag - About&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Index;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"../components/Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Header/&gt;</span><br><span class="line">        &lt;p&gt;This is the about page&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> About;</span><br></pre></td></tr></table></figure><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><image src='/gallery/Screen Shot 2020-01-09 at 9.09.15 PM.png'/><image src='/gallery/Screen Shot 2020-01-09 at 9.09.52 PM.png'/><h2 id="레이아웃-컴포넌트"><a href="#레이아웃-컴포넌트" class="headerlink" title="레이아웃 컴포넌트"></a>레이아웃 컴포넌트</h2><p>레아아웃 컴포넌트는 페이지를 구성한는 여러가지 컴포넌트를 사용해 웹사이트 전체적인 레이아웃을 구성한다. 이점은 여러페이지 마다 많은 컴포넌트를 사용하지 않고 레이아웃 컴포넌트 하나만 사용하면 되고 유지보수 측면으로도 간편하기 때문이다.</p><p>그러면 <code>components/BaseLayout.js</code> 를 생성하여 다음 코드를 작성하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseLayout = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;Header/&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default BaseLayout</span></span><br></pre></td></tr></table></figure><p>그리고 <code>index.js</code> 와 <code>about.js</code> 도 다음과 같이 수정하자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"><span class="keyword">import</span> BaseLayout <span class="keyword">from</span> <span class="string">'../components/BaseLayout'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;BaseLayout&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            Next.js Main Page.</span><br><span class="line">        &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Link href='/</span>about<span class="string">'&gt;</span></span><br><span class="line"><span class="string">            &lt;a&gt;Link API - About&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/Link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;br/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;a href='</span>/about<span class="string">'&gt;A tag - About&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/BaseLayout&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Index;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseLayout <span class="keyword">from</span> <span class="string">"../components/BaseLayout"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;BaseLayout&gt;</span><br><span class="line">        &lt;p&gt;This is the about page&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>BaseLayout&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> About;</span><br></pre></td></tr></table></figure><h3 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h3><p>결과는 이전과 같을 것이다. 그러나 레이아웃 컴포넌트를 통해 유지보수가 더 간편해지고(<span style='gray'>Header.js를 수정하면 모든 페이지의 Header를 변경할 수 있다.</span>), 많은 페이지 개발이 필요하다면 BaseLayout.js를 통해 간편하게 개발할 수 있을 것이다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React에서 component를 생성해서 여러가지 방법으로 재사용하고 편리하게 화면을 구성할 수 있는 요소이다. Next.js에서 component를 어떻게 생성하는지 알아보았다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Next.js" scheme="http://kungbi.github.io/categories/Devlog/Next-js/"/>
    
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="next.js" scheme="http://kungbi.github.io/tags/next-js/"/>
    
  </entry>
  
  <entry>
    <title>Next.js - Link API 라우팅</title>
    <link href="http://kungbi.github.io/2020/01/03/Next.js/Next.js%20Link%20API/"/>
    <id>http://kungbi.github.io/2020/01/03/Next.js/Next.js%20Link%20API/</id>
    <published>2020-01-03T11:00:00.000Z</published>
    <updated>2020-02-12T17:20:40.817Z</updated>
    
    <content type="html"><![CDATA[<p>Next.js의 핵심 기능 중 하나인 <code>Link API 라우팅</code> 에 대해서 알아보려고 한다.</p><a id="more"></a><p>Link API는 손쉽게 라우팅을 할 수 있게 해주는 API이다. Next.js의 핵심 기능 중 하나이다.</p><p>우선 Link API를 사용하려면 라이브러리를 <code>import</code> 해주어야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br></pre></td></tr></table></figure><p><code>pages/index.js</code> 로 가서 코드를 수정해 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            Next.js Main Page.</span><br><span class="line">        &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Link href='/</span>about<span class="string">'&gt;</span></span><br><span class="line"><span class="string">          &lt;a&gt;Link API - About&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/Link&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Index;</span></span><br></pre></td></tr></table></figure><p>그리고 <code>localhost:3000</code> 으로 들어가 Link API - About 를 클릭해보면 about 페이지로 넘어간다.</p><p>그렇다면 우리가 평소에 사용했었던 &lt;a&gt; 태그를 사용해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            Next.js Main Page.</span><br><span class="line">        &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Link href='/</span>about<span class="string">'&gt;</span></span><br><span class="line"><span class="string">          &lt;a&gt;Link API - About&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/Link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;br/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;a href='</span>/about<span class="string">'&gt;A tag - About&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default Index;</span></span><br></pre></td></tr></table></figure><p>둘의 차이를 확인해보자. 다른 것이 보일 것이다.</p><p>&lt;a&gt;태그를 활용한 페이지 이동은 새로고침을 하여서 다시 SSR을 하게 된다. 반면 Link API를 활용한 페이지 이동은 새로고침을 하지 않고 CSR을 하게 된다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Next.js의 핵심 기능 중 하나인 &lt;code&gt;Link API 라우팅&lt;/code&gt; 에 대해서 알아보려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Next.js" scheme="http://kungbi.github.io/categories/Devlog/Next-js/"/>
    
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="next.js" scheme="http://kungbi.github.io/tags/next-js/"/>
    
  </entry>
  
  <entry>
    <title>Next.js로 프로젝트 생성하기</title>
    <link href="http://kungbi.github.io/2020/01/03/Next.js/make_project_with_nex.js/"/>
    <id>http://kungbi.github.io/2020/01/03/Next.js/make_project_with_nex.js/</id>
    <published>2020-01-03T01:00:00.000Z</published>
    <updated>2020-02-12T17:20:21.121Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스팅은 Next.js로 프로젝트를 생성하는 것에 대해서 작성해보려고 한다.</p><a id="more"></a><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir todo-list</span><br><span class="line">$ <span class="built_in">cd</span> todo-list</span><br><span class="line">$ yarn init -y</span><br><span class="line">$ yarn add react react-dom next</span><br><span class="line">$ mkdir pages</span><br></pre></td></tr></table></figure><p>그리고 “package.json” 파일을 수정하자. 다음과 같이 npm 스크립트를 추가하면 된다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">"dev": "next",</span><br><span class="line">"build", "next build",</span><br><span class="line">"start", "next start"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>다음 명령어로 개발 서버를 실행할 수 있다.</p><blockquote><p>$ npm run dev</p></blockquote><p><img src="https://user-images.githubusercontent.com/16620948/71720987-d39c5000-2e66-11ea-9baf-4432936042a2.png" alt="image-20200103194825502"><br>다음과 같이 출력되면 서버가 정상적으로 실행된 것이다. <a href="http://localhost:3000">http://localhost:3000</a> 으로 접속할 수 있다.</p><h2 id="404-페이지"><a href="#404-페이지" class="headerlink" title="404 페이지"></a>404 페이지</h2><p>그러면 다음과 같이 보이게 된다. 404에러가 출력되면서 페이지가 없다고 한다. 그러면 페이지를 만들어보자.</p><p><img src="https://user-images.githubusercontent.com/16620948/71721011-edd62e00-2e66-11ea-9e79-e2db67ae4e54.png" alt="image"></p><h2 id="페이지-생성"><a href="#페이지-생성" class="headerlink" title="페이지 생성"></a>페이지 생성</h2><h4 id="index-js-파일-생성"><a href="#index-js-파일-생성" class="headerlink" title="index.js 파일 생성"></a>index.js 파일 생성</h4><p>pages폴더에 index.js 파일을 생성해서 다음과 같이 수정해 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            Hello, World!</span><br><span class="line">        &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/16620948/71721040-07777580-2e67-11ea-8ad3-636b419afecc.png" alt="image"></p><h2 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h2><p>next.js를 사용하면서 꼭 지켜야할 규칙들이 있다. <strong>pages</strong> 폴더가 꼭 필요하다. 그리고 <strong>라우팅 URL</strong>과 <strong>컴포넌트</strong>의 이름이 같아야 한다. 예를 들어서 url이 <code>/about</code>이라면 <code>pages/about.js</code>파일을 만들어야 한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번 포스팅은 Next.js로 프로젝트를 생성하는 것에 대해서 작성해보려고 한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Next.js" scheme="http://kungbi.github.io/categories/Devlog/Next-js/"/>
    
    
      <category term="next.js" scheme="http://kungbi.github.io/tags/next-js/"/>
    
      <category term="react" scheme="http://kungbi.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Next.js란?</title>
    <link href="http://kungbi.github.io/2020/01/03/Next.js/what_is_Next.js/"/>
    <id>http://kungbi.github.io/2020/01/03/Next.js/what_is_Next.js/</id>
    <published>2020-01-02T20:00:00.000Z</published>
    <updated>2020-02-12T17:20:25.704Z</updated>
    
    <content type="html"><![CDATA[<p>학교 프로젝트를 하다가 웹사이트를 만들어야할 필요가 있어서 Next.js라는 친구를 공부해봤다. 괜찮았고, 계속 공부해볼만한 가치가 있었다.</p><a id="more"></a><h2 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h2><p>React 프로젝트를 시작할 때 많은 사람들이 <a href="https://github.com/facebook/create-react-app">Create React App</a>을 사용했을 것이다. CRA는 기본적인 React 프로젝트를 생성하기에 좋은 툴이다. 그러나 CRA는 서버에서 페이지를 렌더링 하지 않는다. 오직 클라이언트 사이드 렌더링만 지원한다. 그리고 러닝 커브가 높다. 클라이언트 사이드 라우팅과 페이지 레이아웃 등을 공부해야 하기 때문이다.</p><p>이를 해결하고 간편하게 React 프로젝트를 생성할 수 있게 도와주는 Next.js를 소개한다. PHP로 만든 웹페이지를 생각해보자. 라우팅에 대해서 전혀 걱정하지 않았을 것이다. 그러나 React는 따로 라우팅을 해주어야 한다. 이를 대신 처리해 주는 것이 React.js 전용 프레임 워크인 Next.js이다.</p><h3 id="Next-js의-장점"><a href="#Next-js의-장점" class="headerlink" title="Next.js의 장점"></a>Next.js의 장점</h3><ul><li>기본적으로 서버 사이드 렌더링을 해준다.</li><li>그래서 클라이언트의 초기 렌더링 속도를 향상 시켜줌.</li><li>빠른 속도를 위해 code-splitting을 지원한다.</li><li>클라이언트 사이드 라우팅도 지원한다.</li></ul><hr><h2 id="Next-js-동작-방식"><a href="#Next-js-동작-방식" class="headerlink" title="Next.js 동작 방식"></a>Next.js 동작 방식</h2><p>SSR은 서버에서 렌더링 하는 것이다. PHP, JSP가 대표적인 SSR 프레임 워크이다. 미리 html을 작성하여 어떤 유저가 url에 접근하면 그 url에 맞는 html을 전송하는 방식이다. next.js에서의 SSR도 다르지 않다. 서버(node.js)를 실행하고 사용자가 요청하면 html을 생성하여 사용자에게 전송한다. </p><p>다른 점은 모든 요청에 대해서 SSR을 하는 것이 아니라, 초기 렌더링만 해당한다. 그 이후로는 <code>next/router</code>를 통해 렌더링 한다. 이러한 방식으로 SPA의 단점인 초기 렌더링 시간을 줄일 수 있다.</p><img src="https://user-images.githubusercontent.com/16620948/71726642-149e5f80-2e7b-11ea-9314-7ea838d8c087.png" alt="image" style="zoom:70%;" /><p>CSR은 Client Side Rendering이다. CSR은 HTML, CSS, JS를 받고 그 이후에 렌더링을 시작한다. </p><p>Next.js는 다음과 같은 순서로 실행 된다.</p><ol><li>유저가 페이지에 접속한다.</li><li>실행되고 있는 node 서버가 요청을 받고 서버 렌더링을 한다.</li><li>만들어진 HTML을 전송한다.</li><li>사용자가 다른 경로(링크)를 클릭하면, 해당 URL로 라우팅한다.</li><li>그리고 해당 페이지 코드를 렌더링 한다.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;학교 프로젝트를 하다가 웹사이트를 만들어야할 필요가 있어서 Next.js라는 친구를 공부해봤다. 괜찮았고, 계속 공부해볼만한 가치가 있었다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Next.js" scheme="http://kungbi.github.io/categories/Devlog/Next-js/"/>
    
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="next.js" scheme="http://kungbi.github.io/tags/next-js/"/>
    
      <category term="react" scheme="http://kungbi.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Server side rendering VS Client side rendering</title>
    <link href="http://kungbi.github.io/2020/01/02/Web/Server-side-rendering-VS-Client-side-rendering/"/>
    <id>http://kungbi.github.io/2020/01/02/Web/Server-side-rendering-VS-Client-side-rendering/</id>
    <published>2020-01-02T06:00:00.000Z</published>
    <updated>2020-02-12T17:20:56.178Z</updated>
    
    <content type="html"><![CDATA[<p>Server side MVC와 Client side MVC의 차이는 무엇일까? 최근 react를 공부하게 되면서 이 둘의 차이를 공부해보았다. MVC에 대한 포스팅을 <a href="http://kungbi.github.io/devlog/2020/01/01/MVC란/">MVC</a> 다음 포스팅을 확인해보자.</p><a id="more"></a><img src="https://user-images.githubusercontent.com/16620948/71723554-642b5e00-2e70-11ea-888b-c0487dfc824f.png" alt="image" style="zoom:40%;" /><h2 id="Server-side-MVC-와-Client-side-MVC"><a href="#Server-side-MVC-와-Client-side-MVC" class="headerlink" title="Server side MVC 와 Client side MVC?"></a>Server side MVC 와 Client side MVC?</h2><image src="/gallery/1_5gCHJbU0qoYSKa-hvyyfVA.png"/><p>스마트폰의 사용자들이 많아지면서 스마트폰에 최적화된 웹 페이지가 중요해지기 시작했다. 스마트폰은 데스크탑에 비해 낮은 성능 때문에 이전의 방식으로 유지하기엔 어려움이 많았다. 따라서 다른 방법이 탄생했다. 바로 SPA(<strong>S</strong>ingle <strong>P</strong>age <strong>A</strong>pplication)이다.</p><p>SPA는 최초에 한번 페이지 전체를 로딩한 이후, 필요한 부분만 데이터 요청을 하여 그 부분만 JS를 통해 렌더링 하는 방식이다. 이전의 방식(SSR)은 새로운 데이터가 필요할 때마다 페이지 전체를 렌더링 할 필요가 있었다.</p><p>그러나 SPA는 필요한 부분만 렌더링 하는 방식으로 트래픽을 감소시키고, 속도는 빨라졌다. 서버는 JSON으로 데이터만 전송하고 클라이언트에선 JS로 받은 데이터를 통해 html을 그리는 방식이다. SPA Framework에는 <strong>Angular JS</strong>, <strong>Backbone</strong>, <strong>React</strong> 등이 있다.</p><image src="/gallery/1_paPkmhDhXifPg-64om52og.jpeg"/><h3 id="각-렌더링의-장단점"><a href="#각-렌더링의-장단점" class="headerlink" title="각 렌더링의 장단점"></a>각 렌더링의 장단점</h3><p>CSR은 필요한 부분만 요청하여 데이터만 받아 특정 부분만 다시 그리면 되기 때문에 속도가 더 빨라진다. 그러나 단점도 존재한다. 초기 페이지를 읽는 시간, 자바스크립트를 읽는 시간, 자바스크립트가 화면을 그리는 시간이 소요되기 때문이다. <em>초기 페이지 로딩</em> 시간이 길어질 수도 있다는 것이다.</p><p>그리고 검색엔진이 페이지를 읽지 못할 수 있다. 그 이유는 자바스크립트를 먼저 부른 뒤에 화면을 그린다. 그러나 검색엔진은 자바스크립트 파일을 실행시키지 못한다.  </p><p>서버 사이드 렌더링은 클라이언트 사이드 렌더링의 반대이다. 초기 로딩 시간이 빠른 대신, 새로운 데이터를 불러올때마다 전체 페이지를 렌더링 해야하는 등의 단점이 있다.</p><p>결론적으로 어느 것을 사용해도 장단점은 있으며, 개발하고자 하는 도메인에 따라서 결정하도록 하자.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Server side MVC와 Client side MVC의 차이는 무엇일까? 최근 react를 공부하게 되면서 이 둘의 차이를 공부해보았다. MVC에 대한 포스팅을 &lt;a href=&quot;http://kungbi.github.io/devlog/2020/01/01/MVC란/&quot;&gt;MVC&lt;/a&gt; 다음 포스팅을 확인해보자.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Web" scheme="http://kungbi.github.io/categories/Devlog/Web/"/>
    
    
      <category term="web" scheme="http://kungbi.github.io/tags/web/"/>
    
      <category term="MVC" scheme="http://kungbi.github.io/tags/MVC/"/>
    
      <category term="rendering" scheme="http://kungbi.github.io/tags/rendering/"/>
    
  </entry>
  
  <entry>
    <title>[Web] MVC란?</title>
    <link href="http://kungbi.github.io/2020/01/01/Web/mvc/"/>
    <id>http://kungbi.github.io/2020/01/01/Web/mvc/</id>
    <published>2020-01-01T01:00:00.000Z</published>
    <updated>2020-02-12T17:20:52.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC?"></a>MVC?</h2><p>MVC는 <strong>M</strong>odel <strong>V</strong>iew <strong>C</strong>ontroller 의 약자이다. 이는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.</p><a id="more"></a><h3 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h3><ul><li>Model: 현재 상태, 각종 데이터를 포함한다. 예를들어 쇼핑몰이라면 가지고있는 상품 리스트 가격 등 이다.</li><li>View: 특정 방식으로 Model의 데이터를 보기 좋게 하여 사용자에게 보여준다.</li><li>Controller: 사용자로부터 입력을 받아 Model의 데이터를 수정하는 역할을 한다.</li></ul><h3 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h3><p><strong>Controller</strong>는 <strong>Model</strong>에게 입력을 하고 변한 값들을 <strong>View</strong>에게 보내 보기 좋게 변경하여 사용자에게 다시 보내진다.</p><p align="center">  <img src="/gallery/71722902-07c73f00-2e6e-11ea-872c-ebd452925b3d.png" alt="" style="zoom:80%;" />]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC?&quot;&gt;&lt;/a&gt;MVC?&lt;/h2&gt;&lt;p&gt;MVC는 &lt;strong&gt;M&lt;/strong&gt;odel &lt;strong&gt;V&lt;/strong&gt;iew &lt;strong&gt;C&lt;/strong&gt;ontroller 의 약자이다. 이는 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Devlog" scheme="http://kungbi.github.io/categories/Devlog/"/>
    
      <category term="Web" scheme="http://kungbi.github.io/categories/Devlog/Web/"/>
    
    
      <category term="MVC" scheme="http://kungbi.github.io/tags/MVC/"/>
    
  </entry>
  
</feed>
